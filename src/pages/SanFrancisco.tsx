import Head from "next/head";
import Link from "next/link";

import styles from "./index.module.css";

import { fetchWeatherApi } from 'openmeteo';

export default function SanFrancisco() {
    return (
        <>
            <Head>
                <title>San Francisco</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.container}>
                    <h1 className={styles.title}>
                        Create <span className={styles.pinkSpan}>T3</span> App
                    </h1>
                    <div className={styles.cardRow}>
                        <Link
                            className={styles.card}
                            href="https://create.t3.gg/en/usage/first-steps"
                            target="_blank"
                        >
                            <h3 className={styles.cardTitle}>First Steps →</h3>
                            <div className={styles.cardText}>
                                Just the basics - Everything you need to know to set up your
                                database and authentication.
                            </div>
                        </Link>
                        <Link
                            className={styles.card}
                            href="https://create.t3.gg/en/introduction"
                            target="_blank"
                        >
                            <h3 className={styles.cardTitle}>Documentation →</h3>
                            <div className={styles.cardText}>
                                Learn more about Create T3 App, the libraries it uses, and how
                                to deploy it.
                            </div>
                        </Link>
                    </div>
                </div>
            </main>
        </>
    );
}

let inputLatitude = 0;
let inputLongitude = 0;
let inputStartDate = new Date();
let inputEndDate = new Date();


const params = {
    "latitude": inputLatitude,
    "longitude": inputLongitude,
    "start_date": inputStartDate,
    "end_date": inputEndDate,
    "models": ["CMCC_CM2_VHR4", "FGOALS_f3_H", "HiRAM_SIT_HR", "MRI_AGCM3_2_S", "EC_Earth3P_HR", "MPI_ESM1_2_XR", "NICAM16_8S"],
    "timezone": "America/Los_Angeles",
    "daily": "temperature_2m_max"
};
const url = "https://climate-api.open-meteo.com/v1/climate";
const responses = await fetchWeatherApi(url, params);

// Helper function to form time ranges
const range = (start: number, stop: number, step: number) =>
    Array.from({ length: (stop - start) / step }, (_, i) => start + i * step);

// Process first location. Add a for-loop for multiple locations or weather models
const response = responses[0];

// Attributes for timezone and location
const utcOffsetSeconds = response.utcOffsetSeconds();
const timezone = response.timezone();
const timezoneAbbreviation = response.timezoneAbbreviation();
const latitude = response.latitude();
const longitude = response.longitude();

const daily = response.daily()!;

// Note: The order of weather variables in the URL query and the indices below need to match!
const weatherData = {

    daily: {
        time: range(Number(daily.time()), Number(daily.timeEnd()), daily.interval()).map(
            (t) => new Date((t + utcOffsetSeconds) * 1000)
        ),
        temperature2mMax: daily.variables(0)!.valuesArray()!,
    },

};

// `weatherData` now contains a simple structure with arrays for datetime and weather data
for (let i = 0; i < weatherData.daily.time.length; i++) {
    console.log(
        weatherData.daily.time[i].toISOString(),
        weatherData.daily.temperature2mMax[i]
    );
}